#![allow(non_snake_case)]

use crate::co::{ACCESS_RIGHTS, STANDARD_RIGHTS, SUBLANG, WS, WS_EX};

const_type! { KEY, u32,
	/// [`RegOpenKeyEx`](crate::HKEY::RegOpenKeyEx) `samDesired` (`u32`).

	QUERY_VALUE, 0x0001
	SET_VALUE, 0x0002
	CREATE_SUB_KEY, 0x0004
	ENUMERATE_SUB_KEYS, 0x0008
	NOTIFY, 0x0010
	CREATE_LINK, 0x0020
	WOW64_32KEY, 0x0200
	WOW64_64KEY, 0x0100
	WOW64_RES, 0x0300
	READ, (STANDARD_RIGHTS::READ.0 | Self::QUERY_VALUE.0 | Self::ENUMERATE_SUB_KEYS.0 | Self::NOTIFY.0) & !ACCESS_RIGHTS::SYNCHRONIZE.0
	WRITE, (STANDARD_RIGHTS::WRITE.0 | Self::SET_VALUE.0 | Self::CREATE_SUB_KEY.0) & !ACCESS_RIGHTS::SYNCHRONIZE.0
	EXECUTE, Self::READ.0 & !ACCESS_RIGHTS::SYNCHRONIZE.0
	ALL_ACCESS, (STANDARD_RIGHTS::ALL.0 | Self::QUERY_VALUE.0 | Self::SET_VALUE.0 | Self::CREATE_SUB_KEY.0 | Self::ENUMERATE_SUB_KEYS.0 | Self::NOTIFY.0 | Self::CREATE_LINK.0) & !ACCESS_RIGHTS::SYNCHRONIZE.0
}

const_type! { LANG, u16,
	/// [`FormatMessage`](crate::co::ERROR::FormatMessage) `dwLanguageId`
	/// (`u16`), used with [`SUBLANG`](crate::co::SUBLANG).

	NEUTRAL, 0x00
	INVARIANT, 0x7f
	AFRIKAANS, 0x36
	ALBANIAN, 0x1c
	ALSATIAN, 0x84
	AMHARIC, 0x5e
	ARABIC, 0x01
	ARMENIAN, 0x2b
	ASSAMESE, 0x4d
	AZERI, 0x2c
	AZERBAIJANI, 0x2c
	BANGLA, 0x45
	BASHKIR, 0x6d
	BASQUE, 0x2d
	BELARUSIAN, 0x23
	BENGALI, 0x45
	BRETON, 0x7e
	BOSNIAN, 0x1a
	BOSNIAN_NEUTRAL, 0x781a
	BULGARIAN, 0x02
	CATALAN, 0x03
	CENTRAL_KURDISH, 0x92
	CHEROKEE, 0x5c
	CHINESE, 0x04
	CHINESE_SIMPLIFIED, 0x04
	CHINESE_TRADITIONAL, 0x7c04
	CORSICAN, 0x83
	CROATIAN, 0x1a
	CZECH, 0x05
	DANISH, 0x06
	DARI, 0x8c
	DIVEHI, 0x65
	DUTCH, 0x13
	ENGLISH, 0x09
	ESTONIAN, 0x25
	FAEROESE, 0x38
	FARSI, 0x29
	FILIPINO, 0x64
	FINNISH, 0x0b
	FRENCH, 0x0c
	FRISIAN, 0x62
	FULAH, 0x67
	GALICIAN, 0x56
	GEORGIAN, 0x37
	GERMAN, 0x07
	GREEK, 0x08
	GREENLANDIC, 0x6f
	GUJARATI, 0x47
	HAUSA, 0x68
	HAWAIIAN, 0x75
	HEBREW, 0x0d
	HINDI, 0x39
	HUNGARIAN, 0x0e
	ICELANDIC, 0x0f
	IGBO, 0x70
	INDONESIAN, 0x21
	INUKTITUT, 0x5d
	IRISH, 0x3c
	ITALIAN, 0x10
	JAPANESE, 0x11
	KANNADA, 0x4b
	KASHMIRI, 0x60
	KAZAK, 0x3f
	KHMER, 0x53
	KICHE, 0x86
	KINYARWANDA, 0x87
	KONKANI, 0x57
	KOREAN, 0x12
	KYRGYZ, 0x40
	LAO, 0x54
	LATVIAN, 0x26
	LITHUANIAN, 0x27
	LOWER_SORBIAN, 0x2e
	LUXEMBOURGISH, 0x6e
	MACEDONIAN, 0x2f
	MALAY, 0x3e
	MALAYALAM, 0x4c
	MALTESE, 0x3a
	MANIPURI, 0x58
	MAORI, 0x81
	MAPUDUNGUN, 0x7a
	MARATHI, 0x4e
	MOHAWK, 0x7c
	MONGOLIAN, 0x50
	NEPALI, 0x61
	NORWEGIAN, 0x14
	OCCITAN, 0x82
	ODIA, 0x48
	ORIYA, 0x48
	PASHTO, 0x63
	PERSIAN, 0x29
	POLISH, 0x15
	PORTUGUESE, 0x16
	PULAR, 0x67
	PUNJABI, 0x46
	QUECHUA, 0x6b
	ROMANIAN, 0x18
	ROMANSH, 0x17
	RUSSIAN, 0x19
	SAKHA, 0x85
	SAMI, 0x3b
	SANSKRIT, 0x4f
	SCOTTISH_GAELIC, 0x91
	SERBIAN, 0x1a
	SERBIAN_NEUTRAL, 0x7c1a
	SINDHI, 0x59
	SINHALESE, 0x5b
	SLOVAK, 0x1b
	SLOVENIAN, 0x24
	SOTHO, 0x6c
	SPANISH, 0x0a
	SWAHILI, 0x41
	SWEDISH, 0x1d
	SYRIAC, 0x5a
	TAJIK, 0x28
	TAMAZIGHT, 0x5f
	TAMIL, 0x49
	TATAR, 0x44
	TELUGU, 0x4a
	THAI, 0x1e
	TIBETAN, 0x51
	TIGRIGNA, 0x73
	TIGRINYA, 0x73
	TSWANA, 0x32
	TURKISH, 0x1f
	TURKMEN, 0x42
	UIGHUR, 0x80
	UKRAINIAN, 0x22
	UPPER_SORBIAN, 0x2e
	URDU, 0x20
	UZBEK, 0x43
	VALENCIAN, 0x03
	VIETNAMESE, 0x2a
	WELSH, 0x52
	WOLOF, 0x88
	XHOSA, 0x34
	YAKUT, 0x85
	YI, 0x78
	YORUBA, 0x6a
	ZULU, 0x35
}
impl LANG {
	/// [`MAKELANGID`](https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-makelangid)
	/// macro.
	pub fn MAKELANGID(self, sublang: SUBLANG) -> u32 {
		((sublang.0 << 10) | self.0) as u32
	}
}

const_type! { LIF, u32,
	/// [`LITEM`](crate::LITEM) `mask` (`u32`).

	ITEMINDEX, 0x00000001
	STATE, 0x00000002
	ITEMID, 0x00000004
	URL, 0x00000008
}

const_type! { LIS, u32,
	/// [`LITEM`](crate::LITEM) `state` (`u32`).

	FOCUSED, 0x00000001
	ENABLED, 0x00000002
	VISITED, 0x00000004
	HOTTRACK, 0x00000008
	DEFAULTCOLORS, 0x00000010
}

const_type! { LR, u32,
	/// [`LoadImageBitmap`](crate::HINSTANCE::LoadImageBitmap),
	/// [`LoadImageCursor`](crate::HINSTANCE::LoadImageCursor) and
	/// [`LoadImageIcon`](crate::HINSTANCE::LoadImageIcon) `fuLoad`.

	DEFAULTCOLOR, 0x00000000
	MONOCHROME, 0x00000001
	COLOR, 0x00000002
	COPYRETURNORG, 0x00000004
	COPYDELETEORG, 0x00000008
	LOADFROMFILE, 0x00000010
	LOADTRANSPARENT, 0x00000020
	DEFAULTSIZE, 0x00000040
	VGACOLOR, 0x00000080
	LOADMAP3DCOLORS, 0x00001000
	CREATEDIBSECTION, 0x00002000
	COPYFROMRESOURCE, 0x00004000
	SHARED, 0x00008000
}

const_type! { LSFW, u32,
	/// [`LockSetForegroundWindow`](crate::LockSetForegroundWindow) `uLockCode`
	/// (`u32`).

	LOCK, 1
	UNLOCK, 2
}

const_type! { LV_VIEW, u32,
	/// ListView
	/// [views](https://docs.microsoft.com/en-us/windows/win32/controls/list-view-controls-overview)
	/// (`u32`).

	ICON, 0x0000
	DETAILS, 0x0001
	SMALLICON, 0x0002
	LIST, 0x0003
	TILE, 0x0004
}

const_type! { LVCF, u32,
	/// [`LVCOLUMN`](crate::LVCOLUMN) `mask` (`u32`).

	DEFAULTWIDTH, 0x0080
	FMT, 0x0001
	IDEALWIDTH, 0x0100
	IMAGE, 0x0010
	MINWIDTH, 0x0040
	ORDER, 0x0020
	SUBITEM, 0x0008
	TEXT, 0x0004
	WIDTH, 0x0002
}

const_type! { LVCFMT_C, i32,
	/// [`LVCOLUMN`](crate::LVCOLUMN) `mask` (`i32`).

	LEFT, 0x0000
	RIGHT, 0x0001
	CENTER, 0x0002
	JUSTIFYMASK, 0x0003
	IMAGE, 0x0800
	BITMAP_ON_RIGHT, 0x1000
	COL_HAS_IMAGES, 0x8000
	FIXED_WIDTH, 0x00100
	NO_DPI_SCALE, 0x40000
	FIXED_RATIO, 0x80000
	SPLITBUTTON, 0x1000000
}

const_type! { LVCFMT_I, i32,
	/// [`LVITEM`](crate::LVITEM) `piColFmt` (`i32`).

	LINE_BREAK, 0x100000
	FILL, 0x200000
	WRAP, 0x400000
	NO_TITLE, 0x800000
	TILE_PLACEMENTMASK, Self::LINE_BREAK.0 | Self::FILL.0
}

const_type! { LVFI, u32,
	/// [`LVFINDINFO`](crate::LVFINDINFO) `flags` (`u32`).

	PARAM, 0x0001
	STRING, 0x0002
	SUBSTRING, 0x0004
	PARTIAL, 0x0008
	WRAP, 0x0020
	NEARESTXY, 0x0040
}

const_type! { LVGIT, u32,
	/// [`NMLVGETINFOTIP`](crate::NMLVGETINFOTIP) `dwFlags` (`u32`).

	LVGIT_FOLDED, 0x0000
	LVGIT_UNFOLDED, 0x0001
}

const_type! { LVIS, u32,
	/// ListView item
	/// [states](https://docs.microsoft.com/en-us/windows/win32/controls/list-view-item-states)
	/// (`u32`).

	NONE, 0
	FOCUSED, 0x0001
	SELECTED, 0x0002
	CUT, 0x0004
	DROPHILITED, 0x0008
	GLOW, 0x0010
	ACTIVATING, 0x0020
	OVERLAYMASK, 0x0f00
	STATEIMAGEMASK, 0xf000
}

const_type! { LVI_GROUPID, i32,
	/// [`LVITEM`](crate::LVITEM) `iGroupId` (`i32`).

	I_GROUPIDCALLBACK, -1
	I_GROUPIDNONE, -2
}

const_type! { LVIF, u32,
	/// [`LVITEM`](crate::LVITEM) `mask` (`u32`).

	COLFMT, 0x00010000
	COLUMNS, 0x00000200
	GROUPID, 0x00000100
	IMAGE, 0x00000002
	INDENT, 0x00000010
	NORECOMPUTE, 0x00000800
	PARAM, 0x00000004
	STATE, 0x00000008
	TEXT, 0x00000001
}

const_type! { LVKF, u32,
	/// [`NMITEMACTIVATE`](crate::NMITEMACTIVATE) `uKeyFlags` (`u32`).

	ALT, 0x0001
	CONTROL, 0x0002
	SHIFT, 0x0004
}

const_type! { LVNI, u32,
	/// [`LVM_GETNEXTITEM`](crate::msg::LvmGetNextItem) relationship (`u32`).

	ALL, 0x0000
	FOCUSED, 0x0001
	SELECTED, 0x0002
	CUT, 0x0004
	DROPHILITED, 0x0008
	VISIBLEORDER, 0x0010
	PREVIOUS, 0x0020
	VISIBLEONLY, 0x0040
	SAMEGROUPONLY, 0x0080
	ABOVE, 0x0100
	BELOW, 0x0200
	TOLEFT, 0x0400
	TORIGHT, 0x0800
}

const_type! { LVS, u32,
	/// List view control
	/// [styles](https://docs.microsoft.com/en-us/windows/win32/controls/list-view-window-styles)
	/// (`u32`).

	ICON, 0x0000
	REPORT, 0x0001
	SMALLICON, 0x0002
	LIST, 0x0003
	TYPEMASK, 0x0003
	SINGLESEL, 0x0004
	SHOWSELALWAYS, 0x0008
	SORTASCENDING, 0x0010
	SORTDESCENDING, 0x0020
	SHAREIMAGELISTS, 0x0040
	NOLABELWRAP, 0x0080
	AUTOARRANGE, 0x0100
	EDITLABELS, 0x0200
	OWNERDATA, 0x1000
	NOSCROLL, 0x2000
	TYPESTYLEMASK, 0xfc00
	ALIGNTOP, 0x0000
	ALIGNLEFT, 0x0800
	ALIGNMASK, 0x0c00
	OWNERDRAWFIXED, 0x0400
	NOCOLUMNHEADER, 0x4000
	NOSORTHEADER, 0x8000
}
impl From<LVS> for WS {
	fn from(v: LVS) -> Self {
		Self(v.0)
	}
}

const_type! { LVS_EX, u32,
	/// Extended list view control
	/// [styles](https://docs.microsoft.com/en-us/windows/win32/controls/extended-list-view-styles)
	/// (`u32`).

	NONE, 0
	AUTOAUTOARRANGE, 0x01000000
	AUTOCHECKSELECT, 0x08000000
	AUTOSIZECOLUMNS, 0x10000000
	BORDERSELECT, 0x00008000
	CHECKBOXES, 0x00000004
	COLUMNOVERFLOW, 0x80000000
	COLUMNSNAPPOINTS, 0x40000000
	DOUBLEBUFFER, 0x00010000
	FLATSB, 0x00000100
	FULLROWSELECT, 0x00000020
	GRIDLINES, 0x00000001
	HEADERDRAGDROP, 0x00000010
	HEADERINALLVIEWS, 0x02000000
	HIDELABELS, 0x00020000
	INFOTIP, 0x00000400
	JUSTIFYCOLUMNS, 0x00200000
	LABELTIP, 0x00004000
	MULTIWORKAREAS, 0x00002000
	ONECLICKACTIVATE, 0x00000040
	REGIONAL, 0x00000200
	SIMPLESELECT, 0x00100000
	SINGLEROW, 0x00040000
	SNAPTOGRID, 0x00080000
	SUBITEMIMAGES, 0x00000002
	TRACKSELECT, 0x00000008
	TRANSPARENTBKGND, 0x00400000
	TRANSPARENTSHADOWTEXT, 0x00800000
	TWOCLICKACTIVATE, 0x00000080
	UNDERLINECOLD, 0x00001000
	UNDERLINEHOT, 0x00000800
}
impl From<LVS_EX> for WS_EX {
	fn from(v: LVS_EX) -> Self {
		Self(v.0)
	}
}
